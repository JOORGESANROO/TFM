# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zq1RRqNwOa7lIGGYQwY3pnk4wIq_NMiK
"""

# ===================== #
#   LIBRERÍAS
# ===================== #
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
import seaborn as sns

# Configuración gráfica
sns.set_style("whitegrid")
plt.rcParams["figure.figsize"] = (12,6)

# ===================== #
#   EXTRACCIÓN DE DATOS
# ===================== #
start_date = "2024-11-05"
end_date = "2025-04-30"

# Descargar datos de índices bursátiles
sp500 = yf.download("^GSPC", start=start_date, end=end_date)
dowjones = yf.download("^DJI", start=start_date, end=end_date)
nasdaq = yf.download("^IXIC", start=start_date, end=end_date)

# ===================== #
#   TRANSFORMACIÓN DE DATOS (ÍNDICE POR ÍNDICE)
# ===================== #

# ---- S&P 500 ----
sp500 = sp500.dropna()
sp500["Return"] = sp500["Close"].pct_change()
sp500["Cumulative Return"] = (1 + sp500["Return"]).cumprod() * 100
sp500_volatility = sp500["Return"].std() * (252 ** 0.5)

print("✅ Transformación S&P 500")
print(sp500.head(), "\n")
print("Volatilidad anualizada S&P 500:", sp500_volatility, "\n")

# ---- Dow Jones ----
dowjones = dowjones.dropna()
dowjones["Return"] = dowjones["Close"].pct_change()
dowjones["Cumulative Return"] = (1 + dowjones["Return"]).cumprod() * 100
dowjones_volatility = dowjones["Return"].std() * (252 ** 0.5)

print("✅ Transformación Dow Jones")
print(dowjones.head(), "\n")
print("Volatilidad anualizada Dow Jones:", dowjones_volatility, "\n")

# ---- Nasdaq ----
nasdaq = nasdaq.dropna()
nasdaq["Return"] = nasdaq["Close"].pct_change()
nasdaq["Cumulative Return"] = (1 + nasdaq["Return"]).cumprod() * 100
nasdaq_volatility = nasdaq["Return"].std() * (252 ** 0.5)

print("✅ Transformación Nasdaq")
print(nasdaq.head(), "\n")
print("Volatilidad anualizada Nasdaq:", nasdaq_volatility, "\n")

# ===================== #
#   VISUALIZACIÓN
# ===================== #

# Gráfico de evolución temporal de los índices
plt.plot(sp500.index, sp500['Close'], label="S&P 500", color="blue")
plt.plot(dowjones.index, dowjones['Close'], label="Dow Jones", color="green")
plt.plot(nasdaq.index, nasdaq['Close'], label="Nasdaq", color="red")
plt.title("Evolución de índices bursátiles tras las elecciones de 2024")
plt.xlabel("Fecha")
plt.ylabel("Valor del índice")
plt.legend()
plt.show()

# Gráfico de rendimientos acumulados
plt.plot(sp500.index, sp500["Cumulative Return"], label="S&P 500", color="blue")
plt.plot(dowjones.index, dowjones["Cumulative Return"], label="Dow Jones", color="green")
plt.plot(nasdaq.index, nasdaq["Cumulative Return"], label="Nasdaq", color="red")
plt.title("Rendimientos acumulados (base 100)")
plt.xlabel("Fecha")
plt.ylabel("Índice base 100")
plt.legend()
plt.show()

# ===================== #
#   LIBRERÍAS
# ===================== #
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Configuración gráfica
sns.set_style("whitegrid")
plt.rcParams["figure.figsize"] = (12,6)

# ===================== #
#   EXTRACCIÓN DE DATOS
# ===================== #
pib = pd.read_csv("/content/GDPC1.csv", parse_dates=["observation_date"])
desempleo = pd.read_csv("/content/UNRATE.csv", parse_dates=["observation_date"])
inflacion = pd.read_csv("/content/CORESTICKM159SFRBATL.csv", parse_dates=["observation_date"])

# ===================== #
#   TRANSFORMACIÓN DE DATOS (UNO A UNO)
# ===================== #

# ---- PIB ----
pib = pib.dropna()
pib["Variación trimestral (%)"] = pib["GDPC1"].pct_change() * 100
print("✅ Transformación PIB")
print(pib.head(), "\n")

# ---- Desempleo ----
desempleo = desempleo.dropna()
desempleo["Cambio mensual (p.p.)"] = desempleo["UNRATE"].diff()
print("✅ Transformación Desempleo")
print(desempleo.head(), "\n")

# ---- Inflación ----
inflacion = inflacion.dropna()
inflacion["Cambio mensual (p.p.)"] = inflacion["CORESTICKM159SFRBATL"].diff()
print("✅ Transformación Inflación")
print(inflacion.head(), "\n")

# ===================== #
#   VISUALIZACIÓN
# ===================== #

# -------------------------
# Gráfico 1: Evolución del PIB
plt.plot(pib['observation_date'], pib['GDPC1'], marker='o', color='blue')
plt.title("Evolución del PIB de EE.UU. (nov 2024 - abr 2025)")
plt.xlabel("Fecha")
plt.ylabel("PIB (billones USD)")
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

# -------------------------
# Gráfico 2: Tasa de desempleo
plt.plot(desempleo['observation_date'], desempleo['UNRATE'], marker='o', color='red')
plt.title("Evolución de la tasa de desempleo en EE.UU. (nov 2024 - abr 2025)")
plt.xlabel("Fecha")
plt.ylabel("Tasa de desempleo (%)")
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

# -------------------------
# Gráfico 3: Inflación
plt.plot(inflacion['observation_date'], inflacion['CORESTICKM159SFRBATL'], marker='o', color='green')
plt.title("Evolución de la inflación en EE.UU. (nov 2024 - abr 2025)")
plt.xlabel("Fecha")
plt.ylabel("Inflación (%)")
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

# ===================== #
#   LIBRERÍAS
# ===================== #
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
import seaborn as sns

# Configuración gráfica
sns.set_style("whitegrid")
plt.rcParams["figure.figsize"] = (14,7)

# ===================== #
#   EXTRACCIÓN DE DATOS
# ===================== #
start_date = "2024-11-05"
end_date = "2025-04-30"

# Índices bursátiles internacionales
euro_stoxx = yf.download("^STOXX50E", start=start_date, end=end_date)  # Euro Stoxx 50
ftse100 = yf.download("^FTSE", start=start_date, end=end_date)         # FTSE 100
nikkei = yf.download("^N225", start=start_date, end=end_date)          # Nikkei 225

# Tipos de cambio USD
usd_eur = yf.download("EURUSD=X", start=start_date, end=end_date)
usd_gbp = yf.download("GBPUSD=X", start=start_date, end=end_date)
usd_jpy = yf.download("JPY=X", start=start_date, end=end_date)

# ===================== #
#   TRANSFORMACIÓN DE DATOS (UNO A UNO)
# ===================== #

# ---- Euro Stoxx 50 ----
euro_stoxx = euro_stoxx.dropna()
euro_stoxx["Return"] = euro_stoxx["Close"].pct_change()
euro_stoxx["Cumulative Return"] = (1 + euro_stoxx["Return"]).cumprod() * 100
euro_stoxx_vol = euro_stoxx["Return"].std() * (252 ** 0.5)
print("✅ Transformación Euro Stoxx 50")
print(euro_stoxx.head(), "\n")
print("Volatilidad anualizada Euro Stoxx 50:", euro_stoxx_vol, "\n")

# ---- FTSE 100 ----
ftse100 = ftse100.dropna()
ftse100["Return"] = ftse100["Close"].pct_change()
ftse100["Cumulative Return"] = (1 + ftse100["Return"]).cumprod() * 100
ftse100_vol = ftse100["Return"].std() * (252 ** 0.5)
print("✅ Transformación FTSE 100")
print(ftse100.head(), "\n")
print("Volatilidad anualizada FTSE 100:", ftse100_vol, "\n")

# ---- Nikkei 225 ----
nikkei = nikkei.dropna()
nikkei["Return"] = nikkei["Close"].pct_change()
nikkei["Cumulative Return"] = (1 + nikkei["Return"]).cumprod() * 100
nikkei_vol = nikkei["Return"].std() * (252 ** 0.5)
print("✅ Transformación Nikkei 225")
print(nikkei.head(), "\n")
print("Volatilidad anualizada Nikkei 225:", nikkei_vol, "\n")

# ---- EUR/USD ----
usd_eur = usd_eur.dropna()
usd_eur["Return"] = usd_eur["Close"].pct_change()
print("✅ Transformación EUR/USD")
print(usd_eur.head(), "\n")

# ---- GBP/USD ----
usd_gbp = usd_gbp.dropna()
usd_gbp["Return"] = usd_gbp["Close"].pct_change()
print("✅ Transformación GBP/USD")
print(usd_gbp.head(), "\n")

# ---- JPY/USD ----
usd_jpy = usd_jpy.dropna()
usd_jpy["Return"] = usd_jpy["Close"].pct_change()
print("✅ Transformación JPY/USD")
print(usd_jpy.head(), "\n")

# ===================== #
#   VISUALIZACIÓN
# ===================== #

# Gráfico de evolución de índices bursátiles internacionales
plt.figure()
plt.plot(euro_stoxx.index, euro_stoxx['Close'], label="Euro Stoxx 50", color="purple")
plt.plot(ftse100.index, ftse100['Close'], label="FTSE 100", color="orange")
plt.plot(nikkei.index, nikkei['Close'], label="Nikkei 225", color="brown")
plt.title("Evolución de índices bursátiles internacionales (Nov 2024 - Abr 2025)")
plt.xlabel("Fecha")
plt.ylabel("Valor del índice")
plt.legend()
plt.show()

# Gráfico de rendimientos acumulados
plt.figure()
plt.plot(euro_stoxx.index, euro_stoxx["Cumulative Return"], label="Euro Stoxx 50", color="purple")
plt.plot(ftse100.index, ftse100["Cumulative Return"], label="FTSE 100", color="orange")
plt.plot(nikkei.index, nikkei["Cumulative Return"], label="Nikkei 225", color="brown")
plt.title("Rendimientos acumulados (base 100)")
plt.xlabel("Fecha")
plt.ylabel("Índice base 100")
plt.legend()
plt.show()



# ===================== #
#   LIBRERÍAS
# ===================== #
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
import seaborn as sns

# Configuración gráfica
sns.set_style("whitegrid")
plt.rcParams["figure.figsize"] = (12,6)

# ===================== #
#   EXTRACCIÓN DE DATOS
# ===================== #
start_date = "2024-11-05"
end_date = "2025-04-30"

usd_eur = yf.download("EURUSD=X", start=start_date, end=end_date)
usd_gbp = yf.download("GBPUSD=X", start=start_date, end=end_date)
usd_jpy = yf.download("JPY=X", start=start_date, end=end_date)

# ===================== #
#   TRANSFORMACIÓN DE DATOS (UNO A UNO)
# ===================== #

# ---- USD/EUR ----
usd_eur = usd_eur.dropna()
usd_eur["Return"] = usd_eur["Close"].pct_change()
print("✅ Transformación USD/EUR")
print(usd_eur.head(), "\n")

# ---- USD/GBP ----
usd_gbp = usd_gbp.dropna()
usd_gbp["Return"] = usd_gbp["Close"].pct_change()
print("✅ Transformación USD/GBP")
print(usd_gbp.head(), "\n")

# ---- USD/JPY ----
usd_jpy = usd_jpy.dropna()
usd_jpy["Return"] = usd_jpy["Close"].pct_change()
print("✅ Transformación USD/JPY")
print(usd_jpy.head(), "\n")

# ===================== #
#   VISUALIZACIÓN
# ===================== #

def plot_fx(data, label, color):
    plt.figure()
    plt.plot(data.index, data['Close'], color=color)
    plt.title(f"Evolución tipo de cambio {label} (Nov 2024 - Abr 2025)")
    plt.xlabel("Fecha")
    plt.ylabel("Valor")
    plt.grid(True)
    plt.show()

# Gráficos individuales
plot_fx(usd_eur, "USD/EUR", "blue")
plot_fx(usd_gbp, "USD/GBP", "green")
plot_fx(usd_jpy, "USD/JPY", "red")

# ===================== #
#   TABLAS RESUMEN
# ===================== #
fx_summary = pd.DataFrame({
    "USD/EUR": [usd_eur['Close'].min(), usd_eur['Close'].max(), usd_eur['Close'].mean(), usd_eur['Close'].std()],
    "USD/GBP": [usd_gbp['Close'].min(), usd_gbp['Close'].max(), usd_gbp['Close'].mean(), usd_gbp['Close'].std()],
    "USD/JPY": [usd_jpy['Close'].min(), usd_jpy['Close'].max(), usd_jpy['Close'].mean(), usd_jpy['Close'].std()]
}, index=["Mínimo", "Máximo", "Media", "Desviación estándar"])

print("📊 Resumen estadístico de tipos de cambio:")
print(fx_summary)

# ===================== #
#   LIBRERÍAS
# ===================== #
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
import seaborn as sns

# Configuración gráfica
sns.set_style("whitegrid")
plt.rcParams["figure.figsize"] = (12,6)

# ===================== #
#   PERIODO DE ANÁLISIS
# ===================== #
start_date = "2024-11-05"
end_date = "2025-04-30"

# ===================== #
#   1. ÍNDICES SECTORIALES
# ===================== #
sectores_tickers = {
    "Tecnología": "XLK",
    "Salud": "XLV",
    "Finanzas": "XLF",
    "Energía": "XLE"
}

sectores = {}
for sector, ticker in sectores_tickers.items():
    df = yf.download(ticker, start=start_date, end=end_date)["Close"].dropna()
    df_return = df.pct_change()
    df_cum = (1 + df_return).cumprod() * 100
    sectores[sector] = {"Close": df, "Return": df_return, "Cumulative Return": df_cum}
    print(f"✅ {sector} - Últimos 5 valores Close")
    print(df.tail(), "\n")
    print(f"{sector} - Últimos 5 valores Return")
    print(df_return.tail(), "\n")
    print(f"{sector} - Últimos 5 valores Cumulative Return")
    print(df_cum.tail(), "\n")

    # Gráfico sector
    plt.figure()
    plt.plot(df.index, df, label=f"{sector} Close")
    plt.plot(df_cum.index, df_cum, label=f"{sector} Cumulative", linestyle="--")
    plt.title(f"Evolución {sector}")
    plt.xlabel("Fecha")
    plt.ylabel("Valor")
    plt.legend()
    plt.show()

# ===================== #
#   2. RENDIMIENTO T-BOND 10 AÑOS
# ===================== #
t_bond = yf.download("^TNX", start=start_date, end=end_date)["Close"].dropna()
t_bond_return = t_bond.pct_change()
t_bond_cum = (1 + t_bond_return).cumprod() * 100
print("✅ T-Bond 10A - Últimos 5 valores Close")
print(t_bond.tail(), "\n")
print("T-Bond 10A - Últimos 5 valores Return")
print(t_bond_return.tail(), "\n")
print("T-Bond 10A - Últimos 5 valores Cumulative Return")
print(t_bond_cum.tail(), "\n")

plt.figure()
plt.plot(t_bond.index, t_bond, label="T-Bond Close")
plt.plot(t_bond_cum.index, t_bond_cum, label="T-Bond Cumulative", linestyle="--")
plt.title("Rendimiento T-Bond 10 años")
plt.xlabel("Fecha")
plt.ylabel("Valor / Rendimiento (%)")
plt.legend()
plt.show()

# ===================== #
#   3. COMMODITIES (Petróleo y Oro)
# ===================== #
commodities_tickers = {
    "Petróleo WTI": "CL=F",
    "Oro": "GC=F"
}

commodities = {}
for nombre, ticker in commodities_tickers.items():
    df = yf.download(ticker, start=start_date, end=end_date)["Close"].dropna()
    df_return = df.pct_change()
    df_cum = (1 + df_return).cumprod() * 100
    commodities[nombre] = {"Close": df, "Return": df_return, "Cumulative Return": df_cum}
    print(f"✅ {nombre} - Últimos 5 valores Close")
    print(df.tail(), "\n")
    print(f"{nombre} - Últimos 5 valores Return")
    print(df_return.tail(), "\n")
    print(f"{nombre} - Últimos 5 valores Cumulative Return")
    print(df_cum.tail(), "\n")

    # Gráfico commodity
    plt.figure()
    plt.plot(df.index, df, label=f"{nombre} Close", color="brown" if nombre=="Petróleo WTI" else "gold")
    plt.plot(df_cum.index, df_cum, label=f"{nombre} Cumulative", linestyle="--")
    plt.title(f"Evolución {nombre}")
    plt.xlabel("Fecha")
    plt.ylabel("Valor")
    plt.legend()
    plt.show()