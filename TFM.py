# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zq1RRqNwOa7lIGGYQwY3pnk4wIq_NMiK
"""

# Importar librerías necesarias
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
import seaborn as sns

# Configuración gráfica
sns.set_style("whitegrid")
plt.rcParams["figure.figsize"] = (12,6)

# Definir período de análisis
start_date = "2024-11-05"
end_date = "2025-04-30"

# Descargar datos de índices bursátiles
sp500 = yf.download("^GSPC", start=start_date, end=end_date)
dowjones = yf.download("^DJI", start=start_date, end=end_date)
nasdaq = yf.download("^IXIC", start=start_date, end=end_date)

# Crear tabla resumen
summary_table = pd.DataFrame({
    "S&P 500": [sp500['Close'].min(), sp500['Close'].max(), sp500['Close'].mean()],
    "Dow Jones": [dowjones['Close'].min(), dowjones['Close'].max(), dowjones['Close'].mean()],
    "Nasdaq": [nasdaq['Close'].min(), nasdaq['Close'].max(), nasdaq['Close'].mean()]
}, index=["Mínimo", "Máximo", "Media"])

print(summary_table)

# Gráfico de evolución temporal de los índices
plt.plot(sp500.index, sp500['Close'], label="S&P 500", color="blue")
plt.plot(dowjones.index, dowjones['Close'], label="Dow Jones", color="green")
plt.plot(nasdaq.index, nasdaq['Close'], label="Nasdaq", color="red")
plt.title("Evolución de índices bursátiles tras las elecciones de 2024")
plt.xlabel("Fecha")
plt.ylabel("Valor del índice")
plt.legend()
plt.show()

# Configuración gráfica
sns.set_style("whitegrid")
plt.rcParams["figure.figsize"] = (12,6)

# Cargar los CSV
pib = pd.read_csv("/content/GDPC1.csv", parse_dates=["observation_date"])
desempleo = pd.read_csv("/content/UNRATE.csv", parse_dates=["observation_date"])
inflacion = pd.read_csv("/content/CORESTICKM159SFRBATL.csv", parse_dates=["observation_date"])

# -------------------------
# Gráfico 1: Evolución del PIB
plt.plot(pib['observation_date'], pib['GDPC1'], marker='o', color='blue')
plt.title("Evolución del PIB de EE.UU. (nov 2024 - abr 2025)")
plt.xlabel("Fecha")
plt.ylabel("PIB (billones USD)")
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

# -------------------------
# Gráfico 2: Tasa de desempleo
plt.plot(desempleo['observation_date'], desempleo['UNRATE'], marker='o', color='red')
plt.title("Evolución de la tasa de desempleo en EE.UU. (nov 2024 - abr 2025)")
plt.xlabel("Fecha")
plt.ylabel("Tasa de desempleo (%)")
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

# -------------------------
# Gráfico 3: Inflación
plt.plot(inflacion['observation_date'], inflacion['CORESTICKM159SFRBATL'], marker='o', color='green')
plt.title("Evolución de la inflación en EE.UU. (nov 2024 - abr 2025)")
plt.xlabel("Fecha")
plt.ylabel("Inflación (%)")
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

# Configuración gráfica
sns.set_style("whitegrid")
plt.rcParams["figure.figsize"] = (14,7)

# Definir periodo de análisis
start_date = "2024-11-05"
end_date = "2025-04-30"

# Descargar índices bursátiles internacionales
euro_stoxx = yf.download("^STOXX50E", start=start_date, end=end_date)  # Euro Stoxx 50
ftse100 = yf.download("^FTSE", start=start_date, end=end_date)          # FTSE 100
nikkei = yf.download("^N225", start=start_date, end=end_date)            # Nikkei 225

# Descargar tipos de cambio USD
usd_eur = yf.download("EURUSD=X", start=start_date, end=end_date)
usd_gbp = yf.download("GBPUSD=X", start=start_date, end=end_date)
usd_jpy = yf.download("JPY=X", start=start_date, end=end_date)

# Crear tabla resumen de índices internacionales
indices_summary = pd.DataFrame({
    "Euro Stoxx 50": [euro_stoxx['Close'].min(), euro_stoxx['Close'].max(), euro_stoxx['Close'].mean(), euro_stoxx['Close'].std()],
    "FTSE 100": [ftse100['Close'].min(), ftse100['Close'].max(), ftse100['Close'].mean(), ftse100['Close'].std()],
    "Nikkei 225": [nikkei['Close'].min(), nikkei['Close'].max(), nikkei['Close'].mean(), nikkei['Close'].std()]
}, index=["Mínimo", "Máximo", "Media", "Desviación estándar"])

print("Resumen estadístico de índices internacionales:")
print(indices_summary)



# Gráfico de evolución de índices bursátiles internacionales
plt.figure()
plt.plot(euro_stoxx.index, euro_stoxx['Close'], label="Euro Stoxx 50", color="purple")
plt.plot(ftse100.index, ftse100['Close'], label="FTSE 100", color="orange")
plt.plot(nikkei.index, nikkei['Close'], label="Nikkei 225", color="brown")
plt.title("Evolución de índices bursátiles internacionales (Nov 2024 - Abr 2025)")
plt.xlabel("Fecha")
plt.ylabel("Valor del índice")
plt.legend()
plt.show()



# Configuración gráfica
sns.set_style("whitegrid")
plt.rcParams["figure.figsize"] = (12,6)

# Definir período de análisis
start_date = "2024-11-05"
end_date = "2025-04-30"

# Descargar tipos de cambio USD
usd_eur = yf.download("EURUSD=X", start=start_date, end=end_date)
usd_gbp = yf.download("GBPUSD=X", start=start_date, end=end_date)
usd_jpy = yf.download("JPY=X", start=start_date, end=end_date)

# Función para graficar cada tipo de cambio
def plot_fx(data, label, color):
    plt.figure()
    plt.plot(data.index, data['Close'], color=color)
    plt.title(f"Evolución tipo de cambio {label} (Nov 2024 - Abr 2025)")
    plt.xlabel("Fecha")
    plt.ylabel("Valor")
    plt.grid(True)
    plt.show()

# Gráficos individuales
plot_fx(usd_eur, "USD/EUR", "blue")
plot_fx(usd_gbp, "USD/GBP", "green")
plot_fx(usd_jpy, "USD/JPY", "red")

# Crear tablas resumen de cada tipo de cambio
fx_summary = pd.DataFrame({
    "USD/EUR": [usd_eur['Close'].min(), usd_eur['Close'].max(), usd_eur['Close'].mean(), usd_eur['Close'].std()],
    "USD/GBP": [usd_gbp['Close'].min(), usd_gbp['Close'].max(), usd_gbp['Close'].mean(), usd_gbp['Close'].std()],
    "USD/JPY": [usd_jpy['Close'].min(), usd_jpy['Close'].max(), usd_jpy['Close'].mean(), usd_jpy['Close'].std()]
}, index=["Mínimo", "Máximo", "Media", "Desviación estándar"])

print("Resumen estadístico de tipos de cambio:")
print(fx_summary)

# Configuración gráfica
sns.set_style("whitegrid")
plt.rcParams["figure.figsize"] = (12,6)

# Periodo de análisis
start_date = "2024-11-05"
end_date = "2025-04-30"

# ----------------- 1. Índices sectoriales -----------------
sectores_tickers = {
    "Tecnología": "XLK",
    "Salud": "XLV",
    "Finanzas": "XLF",
    "Energía": "XLE"
}

sectores = yf.download(list(sectores_tickers.values()), start=start_date, end=end_date)["Close"]
sectores.columns = list(sectores_tickers.keys())

# Gráfico 1: evolución de índices sectoriales
sectores.plot(title="Evolución de índices sectoriales")
plt.xlabel("Fecha")
plt.ylabel("Valor del índice ETF")
plt.legend(title="Sector")
plt.show()

# ----------------- 2. Rendimiento T-Bond 10 años -----------------
t_bond = yf.download("^TNX", start=start_date, end=end_date)["Close"]

# Gráfico 2: evolución del rendimiento del bono
t_bond.plot(title="Rendimiento del T-Bond 10 años")
plt.xlabel("Fecha")
plt.ylabel("Rendimiento (%)")
plt.show()

# ----------------- 3. Commodities separados -----------------
commodities = yf.download(["CL=F", "GC=F"], start=start_date, end=end_date)["Close"]
commodities.columns = ["Petróleo WTI", "Oro"]

# Gráfico 3a: Petróleo
commodities["Petróleo WTI"].plot(title="Evolución del Petróleo WTI", color="brown")
plt.xlabel("Fecha")
plt.ylabel("Precio (USD por barril)")
plt.show()

# Gráfico 3b: Oro
commodities["Oro"].plot(title="Evolución del Oro", color="gold")
plt.xlabel("Fecha")
plt.ylabel("Precio (USD por onza)")
plt.show()

# ----------------- 4. Tabla resumen estadístico -----------------
resumen = pd.concat([sectores, t_bond, commodities], axis=1)
resumen.columns = list(sectores_tickers.keys()) + ["T-Bond 10A"] + ["Petróleo WTI", "Oro"]

tabla_resumen = pd.DataFrame({
    "Mínimo": resumen.min(),
    "Máximo": resumen.max(),
    "Media": resumen.mean(),
    "Mediana": resumen.median(),
    "Desviación estándar": resumen.std()
})

print("Tabla 1: Resumen estadístico de sectores y activos internos")
print(tabla_resumen)